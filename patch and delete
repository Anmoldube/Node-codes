const express = require("express");
const app = express();
const fs = require("fs");
const users = require("./software_Data.json");

app.use(express.json()); // Middleware to parse JSON request bodies

// GET all users
app.get("/api/users", (req, res) => {
  return res.json(users);
});

// Render users on the client side
app.get("/users", (req, res) => {
  const html = `
  <ul>
  ${users.map((user) => `<li>${user.first_name}</li>`).join("")}
  </ul>`;
  res.send(html);
});

// GET a specific user by ID
app.get("/api/users/:id", (req, res) => {
  const id = Number(req.params.id);
  const user = users.find((user) => user.id === id);
  if (!user) {
    return res.status(404).json({ error: "User not found" });
  }
  return res.json(user);
});

// POST a new user
app.post("/api/users/", (req, res) => {
  const body = req.body;
  const newUser = { ...body, id: users.length + 1 };
  users.push(newUser);
  fs.writeFile(
    "./software_Data.json",
    JSON.stringify(users, null, 2),
    (err) => {
      if (err) {
        return res.status(500).json({ error: "Failed to save user" });
      }
      return res.status(201).json(newUser);
    }
  );
});

// PATCH: Update a user's information
app.patch("/api/users/:id", (req, res) => {
  const id = Number(req.params.id);
  const userIndex = users.findIndex((user) => user.id === id);
  if (userIndex === -1) {
    return res.status(404).json({ error: "User not found" });
  }

  const updatedUser = { ...users[userIndex], ...req.body };
  users[userIndex] = updatedUser;

  fs.writeFile(
    "./software_Data.json",
    JSON.stringify(users, null, 2),
    (err) => {
      if (err) {
        return res.status(500).json({ error: "Failed to update user" });
      }
      return res.json(updatedUser);
    }
  );
});

// DELETE: Remove a user by ID
app.delete("/api/users/:id", (req, res) => {
  const id = Number(req.params.id);
  const userIndex = users.findIndex((user) => user.id === id);
  if (userIndex === -1) {
    return res.status(404).json({ error: "User not found" });
  }

  users.splice(userIndex, 1);

  fs.writeFile(
    "./software_Data.json",
    JSON.stringify(users, null, 2),
    (err) => {
      if (err) {
        return res.status(500).json({ error: "Failed to delete user" });
      }
      return res.status(204).send();
    }
  );
});

app.listen(3000, () => {
  console.log("Server is working fine");
});
